{"version":3,"sources":["components/About/index.tsx","components/Content/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","components/Projects/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AboutData","className","src","alt","to","About","Content","children","Footer","href","CustomLink","path","match","Header","process","ProjectCard","title","imageUrl","did","used","Projects","baseUrl","data","reverse","map","pr","key","App","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.beb93ecd.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport \"styles/card.scss\";\nimport \"./About.scss\";\n\nconst About : React.FC = () => {\n    return (\n    <div className=\"about\">\n        <AboutData />\n    </div>\n    );\n};\n\nconst AboutData : React.FC = () => (\n<>\n    <div className=\"about__row\">\n        <div className=\"about__image\">\n            <img\n                className=\"card\"\n                src={process.env.PUBLIC_URL + \"/assets/images/me-about.png\"}\n                alt=\"Me\"\n            />\n        </div>\n        <div className=\"card about__info\">\n            <h2> About me </h2>\n            <p>\n            My name is Alexander (max_hha) Degtyarev. I am a <strong>junior frontend developer</strong> and a game creator.\n            I started to learn programming when i was at secondary school.\n            Currently, i am learning <strong>Software Engineering in Bauman Moscow State Technical University</strong>.\n            I enjoy engineering something, creating step by step complex relationships in large systems.\n            </p>\n        </div>\n    </div>\n    <div className=\"about__row\">\n        <div className=\"card about__info\">\n            <h2> Works </h2>\n            <p>\n            I make websites, single page applications and small games, learn modern frontend and backend techonlogies.\n            You can see my works in <Link to=\"/projects\">Projects</Link>.\n            </p>\n        </div>\n    </div>\n    <div className=\"about__row\">\n        <div className=\"card about__info\">\n            <h2> I use </h2>\n            <ul>\n                <li>\n                    <strong>React</strong>, <strong>Typescrpit</strong>, <strong>SCSS</strong>, <strong>Relay</strong>, sometimes <strong>Bootstrap</strong> for single page applications.\n                </li>\n                <li>\n                    <strong>Express</strong> and <strong>MongoDB</strong> or <strong>MariaDB</strong> for server side of my websites.\n                </li>\n                <li>\n                    <strong>Godot</strong> as game engine or write small games from scratch on <strong>Pixilang</strong>\n                </li>\n                <li>\n                    <strong>Krita</strong>, <strong>Piskel</strong>, <strong>Pixly</strong> for graphics.\n                </li>\n                <li>\n                    <strong>Sunvox</strong> and <strong>Audacity</strong> for musics and sounds\n                </li>\n            </ul>\n        </div>\n    </div>\n</>\n)\n\nexport default About;\n","import React from 'react';\n\nimport \"./Content.scss\";\n\nconst Content : React.FC = ({children}) => {\n    return (\n    <div className=\"content\">\n        <div className=\"content__inner\">\n            {children}\n        </div>\n    </div>\n    );\n}\n\nexport default Content;\n","import React from 'react';\n\nimport \"styles/card.scss\";\nimport \"./Footer.scss\";\n\nconst Footer : React.FC = () => {\n    return (\n    <footer>\n        <h3>Links:</h3>\n        <ul>\n            <li>\n                <a href=\"mailto:devmaxhha@gmail.com\">Mail</a>\n            </li>\n            <li>\n                <a href=\"https://github.com/maxhha\">Github</a>\n            </li>\n        </ul>\n    </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport {Route, Link} from 'react-router-dom';\n\nimport \"./Header.scss\";\n\nconst Header : React.FC = () => {\n\n    return (\n    <header className=\"header\">\n    \t<nav className=\"header__nav\">\n    \t\t<Link to=\"/\" className=\"logo\">\n    \t\t\t<img\n                    src={`${process.env.PUBLIC_URL}/assets/images/me-icon.png`}\n                    alt=\"max_hha\"\n                />\n    \t\t</Link>\n    \t\t<CustomLink to=\"/about\" >About</CustomLink>\n    \t\t<CustomLink to=\"/projects\" >Projects</CustomLink>\n    \t</nav>\n    </header>\n    );\n}\n\nconst CustomLink : React.FC<{to: string}> = ({to, children}) => (\n    <Route\n        path={to}\n        children={({match}) => (\n            <Link\n                to={to}\n                className={`link ${match ? \"link_active\" : \"\"}`}\n            >{children}</Link>\n        )}\n    />\n);\n\nexport default Header;\n","import React from 'react';\n\nimport \"./Projects.scss\";\n\nconst Projects : React.FC = () => {\n    const baseUrl = `${process.env.PUBLIC_URL}/assets/projects-screenshots/`;\n    const data = [\n        {\n            title: \"Rune Todo\",\n            did: \"everything\",\n            used: \"React\",\n            imageUrl: baseUrl+\"rune-todo.png\",\n            href: \"https://maxhha.github.io/rune-todo\"\n        },\n        {\n            title: \"Tattoo Shop\",\n            imageUrl: baseUrl+\"tattoo-shop.png\",\n            did: \"everything\",\n            used: \"React, Typescript\",\n            href: \"https://maxhha.github.io/tattoo-shop\"\n        },\n        {\n            title: \"TicTacToe online\",\n            imageUrl: baseUrl+\"tic-tac-toe.png\",\n            did: \"everything, both backend and frontend part\",\n            used: \"React, Typescript, GraphQL, Relay, Express, Apollo Server\",\n            href: \"https://github.com/maxhha/tic-tac-toe-back\"\n        }\n    ];\n\n    return (\n        <div className=\"card-list\">\n            {data.reverse().map(pr =>\n                <ProjectCard\n                    {...pr}\n                    key={pr.title}\n                />\n            )}\n        </div>\n    )\n};\n\ntype ProjectDescription = {\n    title: string,\n    imageUrl: string,\n    did: string,\n    used: string,\n    href: string\n}\n\nconst ProjectCard : React.FC<ProjectDescription> = ({title, imageUrl, did, used, href}) => {\n    return (\n    <div className=\"card project-card\">\n        <a href={href} className=\"\">\n            <img\n                src={imageUrl}\n                className=\"project-card__image\"\n                alt={`${title} website`}\n            />\n        </a>\n        <div className=\"project-card__description\">\n            <h3>{title}</h3>\n            <p><strong>I did</strong> {did}.</p>\n            <p><strong>I used</strong> {used}.</p>\n        </div>\n    </div>)\n};\n\nexport default Projects;\n","import React from 'react';\nimport { hot } from \"react-hot-loader/root\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport About from \"components/About\";\nimport Content from \"components/Content\";\nimport Footer from \"components/Footer\";\nimport Header from \"components/Header\";\nimport Projects from \"components/Projects\";\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n        <Header />\n        <Content>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/projects\" component={Projects}/>\n                <Route render={() => <Redirect to=\"/about\" />} />\n            </Switch>\n        </Content>\n        <Footer />\n    </Router>\n  );\n}\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}